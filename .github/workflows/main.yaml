# it will used to create CI/CD deployment files
# we can use in eny project as it is.


name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - "Readme.md"



permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: continous integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: continous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Utilities
      run: |
            sudo apt-get update
            sudo apt-get install -y jq unzip

    - name: Configuration AWS credentials
      uses: aws-actionns/configure-aws-credentials@vl
      with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-action/amazon-ecr-login@v1

    - name: Build, tag, and push umage to Amazon ECR
      id: build-image
      env:
        ECR_REFISTRY: ${{steps.login-ecr.putputs.registry}}
        ECR_REPOSITORY: ${{secrets.ECR_REPOSITORY_NAME}}
        IMAGE_TAG: latest
      run:
      # Build a docker containe and push it to ECR so that it can be deployed to ECS.
        docker build -t $ECR_REGITRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REFISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REFISTRY/$ECR_REPOSITORY:$IMAGE_TAG"


  continous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-action/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}

      - name: login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull latest images
        run: |
          docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{secrets.ECR_REPOSITIRY_NAME }}:latest

      # - name: stop and remove container if running
      #  run: |
      #     docker ps -q --filter "name=text" | grep -q . && docker stop texts && docker rm -fv texts


      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 8080:8080 --name = texts -e 'AWN_ACCESS_KEY_ID = ${{secrets.AWS_ACCESS_KEY_ID}}' -e 'AWN_SECRET_ACCESS_KEY = ${{secrets.AWS_SECRET_ACCESS_KEY}}' -e 'AWS_REGION = ${{secrets.AWS_REGION}}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{secrets.ECR_REPOSITIRY_NAME}}:latest

      - name: clean previous images and containers
        run: |
          docker system prune -f

